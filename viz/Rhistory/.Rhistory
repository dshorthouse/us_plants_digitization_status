gbif_comp_data <- read_csv("../../gbif_idigbio_comparisons/uniqueToGBIF.csv/part-00000-152c3e61-8f99-4970-8ed6-3e86eb524027-c000.csv")
idigbio_comp_data <- read_csv("../../gbif_idigbio_comparisons/uniqueToiDigBio.csv/part-00000-d4581e18-be6d-4c43-9f99-8d2643a24e9f-c000.csv")
common_comp_data <- read_csv("../../gbif_idigbio_comparisons/commonToGBIFiDigBio.csv/part-00000-cf004e35-1fdf-4f98-b9a4-8f8ba5879b1c-c000.csv")
idigbio_comp_data <- idigbio_comp_data %>% rename(institutionCode = or_institutionCode)
joined_comp_data <- full_join(gbif_comp_data, idigbio_comp_data)
joined_comp_data <- full_join(joined_comp_data, common_comp_data)
total_num_specimens <- c(78694916)
gbif_idigbio_sums <- joined_comp_data[,2:4] %>% summarise_all(sum, na.rm=TRUE)
sankey_sums <- c(gbif_idigbio_sums, total_num_specimens)
names(sankey_sums)[4] <- "total_num_specimens"
total_idigbio <- sankey_sums$uniqueToiDigBio + sankey_sums$commonToGBIFiDigBio
total_unknown <- sankey_sums$total_num_specimens - total_idigbio - sankey_sums$uniqueToGBIF
# A connection data frame is a list of flows with intensity for each flow
links <- data.frame(source=c("total", "total", "total", "idigbio"),
target=c("idigbio","gbif","unknown","gbif"),
value=c(total_idigbio, sankey_sums$uniqueToGBIF, total_unknown, sankey_sums$uniqueToiDigBio))
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 10)
p
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 10)
p
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 10, colourScale=my_color)
p
total_idigbio <- sankey_sums$uniqueToiDigBio + sankey_sums$commonToGBIFiDigBio
total_unknown <- sankey_sums$total_num_specimens - total_idigbio - sankey_sums$uniqueToGBIF
# A connection data frame is a list of flows with intensity for each flow
links <- data.frame(source=c("total", "total", "total", "idigbio"),
target=c("idigbio","gbif","unknown","gbif"),
value=c(total_idigbio, sankey_sums$uniqueToGBIF, total_unknown, sankey_sums$uniqueToiDigBio))
links$group <- as.factor(c("type_a","type_a","type_a","type_b"))
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_a", "type_b", "my_unique_group"]) .range(["#69b3a2", "steelblue", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 10, colourScale=my_color)
p
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_a", "type_b", "my_unique_group"]) .range(["#69b3a2", "steelblue", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 10, colourScale=my_color, LinkGroup="group", NodeGroup="group")
p
total_idigbio <- sankey_sums$uniqueToiDigBio + sankey_sums$commonToGBIFiDigBio
total_unknown <- sankey_sums$total_num_specimens - total_idigbio - sankey_sums$uniqueToGBIF
# A connection data frame is a list of flows with intensity for each flow
links <- data.frame(source=c("total", "total", "total", "idigbio"),
target=c("idigbio","gbif","unknown","gbif"),
value=c(total_idigbio, sankey_sums$uniqueToGBIF, total_unknown, sankey_sums$uniqueToiDigBio))
links$group <- as.factor(c("type_idigbio","type_gbif","type_unknown","type_gbif"))
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_idigbio", "type_gbif", "type_unknown"]) .range(["#69b3a2", "steelblue", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 10,
colourScale=my_color, LinkGroup="group", NodeGroup="group")
p
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_idigbio", "type_gbif", "type_unknown"]) .range(["#69b3a2", "steelblue", "pink", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 10,
colourScale=my_color, LinkGroup="group", NodeGroup="group")
p
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=8, fig.height=10)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_idigbio", "type_gbif", "type_unknown"]) .range(["#69b3a2", "steelblue", "orange", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 10,
colourScale=my_color, LinkGroup="group", NodeGroup="group")
p
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_idigbio", "type_gbif", "type_unknown"]) .range(["steelblue", "#69b3a2", "orange", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 10,
colourScale=my_color, LinkGroup="group", NodeGroup="group")
p
total_idigbio <- sankey_sums$uniqueToiDigBio + sankey_sums$commonToGBIFiDigBio
total_unknown <- sankey_sums$total_num_specimens - total_idigbio - sankey_sums$uniqueToGBIF
# A connection data frame is a list of flows with intensity for each flow
links <- data.frame(source=c("Total Number of US Specimens", "Total Number of US Specimens", "Total Number of US Specimens", "iDigBio"),
target=c("iDigBio","GBIF","Unknown","GBIF"),
value=c(total_idigbio, sankey_sums$uniqueToGBIF, total_unknown, sankey_sums$uniqueToiDigBio))
links$group <- as.factor(c("type_idigbio","type_gbif","type_unknown","type_gbif"))
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_idigbio", "type_gbif", "type_unknown"]) .range(["steelblue", "#69b3a2", "orange", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 10,
colourScale=my_color, LinkGroup="group", NodeGroup="group")
p
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_idigbio", "type_gbif", "type_unknown"]) .range(["steelblue", "#69b3a2", "orange", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=TRUE, fontSize = 10,
colourScale=my_color, LinkGroup="group", NodeGroup="group")
p
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_idigbio", "type_gbif", "type_unknown"]) .range(["steelblue", "#69b3a2", "orange", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=TRUE, fontSize = 10, fontFamily = "serif"
colourScale=my_color, LinkGroup="group", NodeGroup="group")
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_idigbio", "type_gbif", "type_unknown"]) .range(["steelblue", "#69b3a2", "orange", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=TRUE, fontSize = 10, fontFamily = "serif",
colourScale=my_color, LinkGroup="group", NodeGroup="group")
p
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_idigbio", "type_gbif", "type_unknown"]) .range(["steelblue", "#69b3a2", "orange", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=TRUE, fontSize = 10, fontFamily = "sans serif",
colourScale=my_color, LinkGroup="group", NodeGroup="group")
p
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_idigbio", "type_gbif", "type_unknown"]) .range(["steelblue", "#69b3a2", "orange", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=TRUE, fontSize = 10, fontFamily = "sans-serif",
colourScale=my_color, LinkGroup="group", NodeGroup="group")
p
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_idigbio", "type_gbif", "type_unknown"]) .range(["steelblue", "#69b3a2", "orange", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=TRUE, fontSize = 15, fontFamily = "sans-serif",
colourScale=my_color, LinkGroup="group", NodeGroup="group")
p
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_idigbio", "type_gbif", "type_unknown"]) .range(["steelblue", "#69b3a2", "#f0c546", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=TRUE, fontSize = 15, fontFamily = "sans-serif",
colourScale=my_color, LinkGroup="group", NodeGroup="group")
p
total_idigbio <- sankey_sums$uniqueToiDigBio + sankey_sums$commonToGBIFiDigBio
total_unknown <- sankey_sums$total_num_specimens - total_idigbio - sankey_sums$uniqueToGBIF
# A connection data frame is a list of flows with intensity for each flow
links <- data.frame(source=c("Total Number of US Specimens", "Total Number of US Specimens", "Total Number of US Specimens", "iDigBio"),
target=c("iDigBio","GBIF","Not Available in GBIF or iDigBio","GBIF"),
value=c(total_idigbio, sankey_sums$uniqueToGBIF, total_unknown, sankey_sums$uniqueToiDigBio))
links$group <- as.factor(c("type_idigbio","type_gbif","type_unknown","type_gbif"))
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_idigbio", "type_gbif", "type_unknown"]) .range(["steelblue", "#69b3a2", "#f0c546", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=TRUE, fontSize = 15, fontFamily = "sans-serif",
colourScale=my_color, LinkGroup="group", NodeGroup="group")
p
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=8, fig.height=10)
library(tidyverse)
library(networkD3)
gbif_comp_data <- read_csv("../../gbif_idigbio_comparisons/uniqueToGBIF.csv/cleaned_part-00000-152c3e61-8f99-4970-8ed6-3e86eb524027-c000.csv")
gbif_comp_data <- read_csv("../../gbif_idigbio_comparisons/uniqueToGBIF.csv/cleaned_part-00000-152c3e61-8f99-4970-8ed6-3e86eb524027-c000-csv.csv")
idigbio_comp_data <- read_csv("../../gbif_idigbio_comparisons/uniqueToiDigBio.csv/cleaned_part-00000-d4581e18-be6d-4c43-9f99-8d2643a24e9f-c000-csv.csv")
common_comp_data <- read_csv("../../gbif_idigbio_comparisons/commonToGBIFiDigBio.csv/cleaned_part-00000-cf004e35-1fdf-4f98-b9a4-8f8ba5879b1c-c000-csv.csv")
# idigbio_comp_data <- idigbio_comp_data %>% rename(institutionCode = or_institutionCode)
joined_comp_data <- full_join(gbif_comp_data, idigbio_comp_data)
joined_comp_data <- full_join(joined_comp_data, common_comp_data)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=8, fig.height=10)
library(tidyverse)
library(networkD3)
gbif_comp_data <- read_csv("../../gbif_idigbio_comparisons/uniqueToGBIF.csv/cleaned_part-00000-152c3e61-8f99-4970-8ed6-3e86eb524027-c000-csv.csv")
idigbio_comp_data <- read_csv("../../gbif_idigbio_comparisons/uniqueToiDigBio.csv/cleaned_part-00000-d4581e18-be6d-4c43-9f99-8d2643a24e9f-c000-csv.csv")
common_comp_data <- read_csv("../../gbif_idigbio_comparisons/commonToGBIFiDigBio.csv/cleaned_part-00000-cf004e35-1fdf-4f98-b9a4-8f8ba5879b1c-c000-csv.csv")
# idigbio_comp_data <- idigbio_comp_data %>% rename(institutionCode = or_institutionCode)
joined_comp_data <- full_join(gbif_comp_data, idigbio_comp_data)
joined_comp_data <- full_join(joined_comp_data, common_comp_data)
total_num_specimens <- c(78694916)
gbif_idigbio_sums <- joined_comp_data[,2:4] %>% summarise_all(sum, na.rm=TRUE)
sankey_sums <- c(gbif_idigbio_sums, total_num_specimens)
names(sankey_sums)[4] <- "total_num_specimens"
total_idigbio <- sankey_sums$uniqueToiDigBio + sankey_sums$commonToGBIFiDigBio
total_unknown <- sankey_sums$total_num_specimens - total_idigbio - sankey_sums$uniqueToGBIF
# A connection data frame is a list of flows with intensity for each flow
links <- data.frame(source=c("Total Number of US Specimens", "Total Number of US Specimens", "Total Number of US Specimens", "iDigBio"),
target=c("iDigBio","GBIF","Not Available in GBIF or iDigBio","GBIF"),
value=c(total_idigbio, sankey_sums$uniqueToGBIF, total_unknown, sankey_sums$uniqueToiDigBio))
links$group <- as.factor(c("type_idigbio","type_gbif","type_unknown","type_gbif"))
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_idigbio", "type_gbif", "type_unknown"]) .range(["steelblue", "#69b3a2", "#f0c546", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=TRUE, fontSize = 15, fontFamily = "sans-serif",
colourScale=my_color, LinkGroup="group", NodeGroup="group")
p
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=8, fig.height=8)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes$group <- as.factor(c("my_unique_group"))
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
#my_color <- 'd3.scaleOrdinal() .domain(["total", "idigbio","gbif", "unknown"]) .range(["blue", "blue" , "blue", "red"])'
my_color <- 'd3.scaleOrdinal() .domain(["type_idigbio", "type_gbif", "type_unknown"]) .range(["steelblue", "#69b3a2", "#f0c546", "grey"])'
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=TRUE, fontSize = 15, fontFamily = "sans-serif",
colourScale=my_color, LinkGroup="group", NodeGroup="group")
p
pdf('sankey.pdf')
p
dev.off()
pdf('sankey.pdf')
plot(p)
ggsave('sankey.pdf', plot = p)
ggsave('sankey.png', plot = p)
# Print plots to a pdf file
pdf("sankey")
print(p)
dev.off()
# Print plots to a pdf file
pdf("sankey.pdf")
print(p)
dev.off()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=8, fig.height=10)
library(tidyverse)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=8, fig.height=10)
library(tidyverse)
library(ggplot2)
# import the iDigBio data dump
idigbio_us_dataset <- read_csv("../../../gbif_idigbio_institutionCode_summary_cleaned/cleaned_idigbio_us_institutionCode_MIDS_2020-07-13-csv.csv")
# idigbio_us_dataset <- rename(idigbio_us_dataset, institutionCode = or_institutionCode) # consistency with gbif dataset
# import the GBIF data dump
gbif_us_dataset <- read_csv("../../../gbif_idigbio_institutionCode_summary_cleaned/cleaned_gbif_us_institutionCode_MIDS_2020.07.08.csv")
percentage_pivot <- function(us_dataset) {
# Generate percentage of totals as data
percentage_us_dataset <- us_dataset[, 3:ncol(us_dataset)] %>%
mutate(across(everything()), . / us_dataset$total) %>% cbind(., us_dataset$institutionCode)
colnames(percentage_us_dataset)[ncol(percentage_us_dataset)] <- "institutionCode" # clean up yucky column name after cbind operation
# Convert data to a long format
pivoted_percentage_us_dataset <- pivot_longer(percentage_us_dataset, -institutionCode, names_to = "variable", values_to = "coverage")
pivoted_percentage_us_dataset$variable <- as.factor(pivoted_percentage_us_dataset$variable) # prepare data type for violin plots
return(pivoted_percentage_us_dataset)
}
gbif_pivoted_percentage_us_dataset <- percentage_pivot(gbif_us_dataset)
gbif_pivoted_percentage_us_dataset
idigbio_pivoted_percentage_us_dataset <- percentage_pivot(idigbio_us_dataset)
idigbio_pivoted_percentage_us_dataset
merged_pivoted_percentage_us_dataset <- bind_rows(idigbio = idigbio_pivoted_percentage_us_dataset, gbif = gbif_pivoted_percentage_us_dataset, .id = "data_provider")
merged_pivoted_percentage_us_dataset$data_provider <- as.factor(merged_pivoted_percentage_us_dataset$data_provider) # prepare data type for violin plots
merged_pivoted_percentage_us_dataset
p <- ggplot(merged_pivoted_percentage_us_dataset, aes(x=variable, y=coverage)) +
geom_violin(scale = "width", aes(fill = factor(data_provider))) + coord_flip()
p
subset_merged_pivoted_percentage_us_dataset <- merged_pivoted_percentage_us_dataset %>% select(has_image, has_identifiedBy, has_eventDate, has_acceptedNameUsage)
View(merged_pivoted_percentage_us_dataset)
subset_merged_pivoted_percentage_us_dataset <- merged_pivoted_percentage_us_dataset %>% filter(variable == "has_image" | variable == "has_identifiedBy" | variable == "has_eventDate" | variable == "has_acceptedNameUsage")
View(subset_merged_pivoted_percentage_us_dataset)
subset_merged_pivoted_percentage_us_dataset <- merged_pivoted_percentage_us_dataset %>% filter(variable == "has_image" | variable == "has_identifiedBy" | variable == "has_eventDate" | variable == "has_acceptedNameUsage")
p <- ggplot(merged_pivoted_percentage_us_dataset, aes(x=variable, y=coverage)) +
geom_violin(scale = "width", aes(fill = factor(data_provider))) + coord_flip()
p
subset_merged_pivoted_percentage_us_dataset <- merged_pivoted_percentage_us_dataset %>% filter(variable == "has_image" | variable == "has_identifiedBy" | variable == "has_eventDate" | variable == "has_acceptedNameUsage")
p <- ggplot(subset_merged_pivoted_percentage_us_dataset, aes(x=variable, y=coverage)) +
geom_violin(scale = "width", aes(fill = factor(data_provider))) + coord_flip()
p
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=8, fig.height=5)
subset_merged_pivoted_percentage_us_dataset <- merged_pivoted_percentage_us_dataset %>% filter(variable == "has_image" | variable == "has_identifiedBy" | variable == "has_eventDate" | variable == "has_acceptedNameUsage")
p <- ggplot(subset_merged_pivoted_percentage_us_dataset, aes(x=variable, y=coverage)) +
geom_violin(scale = "width", aes(fill = factor(data_provider))) + coord_flip()
p
subset_merged_pivoted_percentage_us_dataset <- merged_pivoted_percentage_us_dataset %>% filter(variable == "has_image" | variable == "has_identifiedBy" | variable == "has_eventDate" | variable == "has_acceptedNameUsage")
p <- ggplot(subset_merged_pivoted_percentage_us_dataset, aes(x=variable, y=coverage)) +
geom_violin(scale = "width", aes(fill = factor(data_provider))) + coord_flip()
p
ggsave("violin_selected.pdf")
